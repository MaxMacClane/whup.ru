'use client';

import { useRouter, usePathname } from 'next/navigation';
import { useMemo, useCallback } from 'react';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º JSON —Ñ–∞–π–ª—ã –Ω–∞–ø—Ä—è–º—É—é
import enTranslations from '../locales/en.json';
import ruTranslations from '../locales/ru.json';

const translations = {
  en: enTranslations,
  ru: ruTranslations
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü
const pageCache = new Map<string, {
  content: string;
  timestamp: number;
}>();

// –ö—ç—à –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–∏–∑–±–µ–≥–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç–∞)
const translationCache = new Map<string, string>();

export const useLanguage = () => {
  const router = useRouter();
  const pathname = usePathname();

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞–ª—å –∏–∑ URL
  const locale = useMemo(() => {
    const pathSegments = pathname.split('/');
    const localeFromPath = pathSegments[1];
    return (localeFromPath === 'en' || localeFromPath === 'ru') ? localeFromPath : 'ru';
  }, [pathname]);

  // –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –±–µ–∑ router.push
  const setLanguageFast = useCallback((newLocale: string) => {
    if (newLocale === locale) return;

    console.log('üöÄ –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Å', locale, '–Ω–∞', newLocale);
    
    const currentPath = pathname.replace(`/${locale}`, `/${newLocale}`);
    const cacheKey = `${currentPath}-${newLocale}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cachedPage = pageCache.get(cacheKey);
    
    if (cachedPage) {
      console.log('üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è', newLocale);
      
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º URL –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
      window.history.pushState({}, '', currentPath);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      updatePageTranslations(newLocale);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–º—ã
      if (typeof document !== 'undefined') {
        const isDark = document.documentElement.classList.contains('dark');
        sessionStorage.setItem('theme', isDark ? 'dark' : 'light');
      }
      
      return;
    }
    
    // –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
    console.log('üîÑ –û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –¥–ª—è', newLocale);
    setLanguage(newLocale);
  }, [locale, pathname]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const updatePageTranslations = useCallback((newLocale: string) => {
    const elementsWithTranslations = document.querySelectorAll('[data-translation-key]');
    
    elementsWithTranslations.forEach(element => {
      const key = element.getAttribute('data-translation-key');
      if (key) {
        const cacheKey = `${key}-${newLocale}`;
        let translatedText = translationCache.get(cacheKey);
        
        if (!translatedText) {
          translatedText = getTranslation(key, newLocale);
          translationCache.set(cacheKey, translatedText);
        }
        
        element.textContent = translatedText;
      }
    });
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞
  const getTranslation = useCallback((key: string, targetLocale: string) => {
    const keys = key.split('.');
    let current: any = translations[targetLocale as keyof typeof translations];

    for (const k of keys) {
      if (current && typeof current === 'object' && k in current) {
        current = current[k];
      } else {
        current = undefined;
        break;
      }
    }

    return typeof current === 'string' ? current : key;
  }, []);

  // –û–±—ã—á–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ (—Å router.push)
  const setLanguage = (newLocale: string) => {
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Å', locale, '–Ω–∞', newLocale);
    
    // –ö—ç—à–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
    const currentCacheKey = `${pathname}-${locale}`;
    if (typeof document !== 'undefined') {
      pageCache.set(currentCacheKey, {
        content: document.documentElement.innerHTML,
        timestamp: Date.now()
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–º—ã
      const isDark = document.documentElement.classList.contains('dark');
      sessionStorage.setItem('theme', isDark ? 'dark' : 'light');
    }
    
    const newPath = pathname.replace(`/${locale}`, `/${newLocale}`);
    console.log('üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞:', newPath);
    router.push(newPath);
  };

  const t = useMemo(() => {
    return (key: string, options?: Record<string, string | number>) => {
      const keys = key.split('.');
      let current: any = translations[locale as keyof typeof translations];

      // –ò–¥–µ–º –ø–æ –∫–ª—é—á–∞–º, –ø–æ–∫–∞ –Ω–µ –¥–æ–π–¥–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
      for (const k of keys) {
        if (current && typeof current === 'object' && k in current) {
          current = current[k];
        } else {
          current = undefined;
          break;
        }
      }

      let result = typeof current === 'string' ? current : key;

      // –õ–æ–≥–∏–∫–∞ –∑–∞–º–µ–Ω—ã –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
      if (typeof result === 'string' && options) {
        Object.keys(options).forEach((optionKey) => {
          const placeholder = `{${optionKey}}`;
          result = result.replace(placeholder, String(options[optionKey]));
        });
      }

      return result;
    };
  }, [locale]);

  return {
    language: locale,
    setLanguage,
    setLanguageFast,
    t
  };
}; 