"use client";

import React, { createContext, useState, useContext, useEffect } from "react";

type Theme = "light" | "dark";

type ThemeContextType = {
  theme: Theme;
  toggleTheme: () => void;
};

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [theme, setTheme] = useState<Theme>("light");
  const [mounted, setMounted] = useState(false);

  // –ü—Ä–æ—Å—Ç–æ —á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ CSS –∫–ª–∞—Å—Å–æ–≤
  useEffect(() => {
    console.log('üé≠ ThemeProvider –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è');
    
    if (typeof document !== "undefined") {
      const isDark = document.documentElement.classList.contains('dark');
      const initialTheme = isDark ? 'dark' : 'light';
      
      console.log('üé≠ CSS –∫–ª–∞—Å—Å—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', document.documentElement.classList.toString());
      console.log('üé≠ –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ —Ç–µ–º—É:', initialTheme);
      
      setTheme(initialTheme);
    }
    setMounted(true);
  }, []);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
  const toggleTheme = () => {
    const newTheme = theme === "light" ? "dark" : "light";
    console.log('üé≠ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–º—É —Å', theme, '–Ω–∞', newTheme);
    
    setTheme(newTheme);
    
    if (typeof document !== "undefined") {
      if (newTheme === "dark") {
        document.documentElement.classList.add("dark");
        document.body.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
        document.body.classList.remove("dark");
      }
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ sessionStorage –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞
      sessionStorage.setItem("theme", newTheme);
      console.log('üé≠ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤ sessionStorage:', newTheme);
      console.log('üé≠ CSS –∫–ª–∞—Å—Å—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:', document.documentElement.classList.toString());
    }
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = () => {
  const ctx = useContext(ThemeContext);
  if (!ctx) throw new Error("useTheme must be used within ThemeProvider");
  return ctx;
};
